------------------------------------------------------------------
Please write your answer below each question
------------------------------------------------------------------

------------------------------------------------------------------
Part B.1 Questions (you must answer questions 1 & 2 to
                    get any credit for Part B.1!!)
------------------------------------------------------------------

 1. Why did the inpainting algorithm work well on your first
    dataset (with Source1, Mask1 as input)?

	Masked-out area contains either high-contrast straight edge 
	(pole, side of building) or random-ish low-contrast (pavement)
	area. Straight edge is easy to detect and match by calculating 
	the gradient. The pavement is just random-ish low contrast pixels,
	it's hard to tell visually if there's even any mis-match anyway.


 2. Why is your second dataset (Source2, Mask2) a "bad" case for 
    inpaiting? Specifically why do you expect the algorithm to 
    perform poorly on the Source2 image for EVERY setting of the 
    patch radius?

	No straight edge at all. Everything is curved/rounded. So when
	the algo tries to extend the gradient from the fill_front, it
	just gets ugly since it shouldn't be extended straight.
	Also that most of the edges are quite unique, i.e., each grapes
	are kind of different and obvious, it's hard to find a good match.
	Plus the edge contrast is low.. a green grape against another green.


------------------------------------------------------------------
Part B.2 Questions
------------------------------------------------------------------

Question 1 (5 points)

The top-level loop of the inpainting algorithm is implemented by
as a while loop in method
inpainting::compute() in file src/inpainting/inpainting_algorithm.cxx

Even though this loop causes the implementation to behave exactly
"as advertised" in the paper for most cases of source images and 
initial masks, there are situations where this is *not* the case. 
In such cases, the implementation is expected to generate inpainted
images that have significant artifacts. 

You need to identify what the problem is with this particular loop.

[Hint: To answer this question, you do *not* need to look at the code 
       of the inpaint_region() and find_first_unfilled_pixel() methods 
       or of the vil_trace_8con_boundary() function (although you do need
       to understand what these methods do). Also, the answer
       has nothing to do with variables iterations_done, max_iterations,
       and inpainted_new_region]

************************
The current algo only traces the fill_front as single connected curve.
If the initial mask has a disconnected part inside, for example, a donut shape mask,
the inner fill_front of the donut will be ignored by the current algorithm.
So all those info (gradient/normal/confidence) from the inner fill_front will not be used.
So if, say, there are some obvious color gradient extending from the inner fill_front,
those gradient may not be inpainted properly, since the algo won't check the gradient
initially there due to it being disconnected to the outer fill_front.

********************
------------------------------------------------------------------
    
Question 2 (15 points)

Prove that if gamma(t) = ( x(t), y(t) ) is a 2D curve, the curvature
k(t) at point gamma(t) is given by the expression

                 2     2     
           dx   d y   d x   dy
           -- * --- - --- * --
                  2     2
           dt   dt    dt    dt
   k(t) = -------------------------
           -                 -  3/2
          |   dx  2    dy  2  |
          | ( -- ) + ( -- )   |
          |   dt       dt     |
           -                 -

(This question is identical to the one on Slide 13 of Lecture 10)
------------------------------------------------------------------
    

